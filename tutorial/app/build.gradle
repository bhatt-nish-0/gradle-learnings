
//applying a plugin
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'maven-publish'
}

//now, we add a plugin that will publish the artifact to
// maven local repo
// which is at C:\Users\nisch\.m2
// you also need to add publishing information
// ./gradlew :app:publishToMavenLocal
publishing {
    publications {
        create("maven", MavenPublication) {
            groupId = "com.gradle.tutorial"
            artifactId = "tutorial"
            version = "6.3"

            from(components["java"])
        }
    }
}



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // this is the source of dependencies.
    // gradle needs some information to find the dependency.
    // since the below refers to the libs.version.toml
    // lets look at libs.version.toml
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}
// the above is how the catalog is referenced

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task helloNish {
    doLast {
        println 'custom task on the way kailash!'
    }
}
/*
below is explicit task dependency
 */

task helloNish2 {
    dependsOn("helloNish")
}
build.dependsOn helloNish

/*
now we talk about incremental builds
we will add a gradle.properties
in the top level folder (tutorial), create a gradle.properties file
org.gradle.console=verbose

now we will run
./gradlew :app:clean :app:build

Calculating task graph as no cached configuration is available for tasks: :app:clean :app:build
thsi is init

> Task :app:helloNish
custom task on the way kailash!

> Task :app:clean
> Task :app:processResources NO-SOURCE
> Task :app:processTestResources NO-SOURCE
> Task :app:compileJava
> Task :app:classes
> Task :app:jar
> Task :app:startScripts
> Task :app:compileTestJava
> Task :app:testClasses
> Task :app:distTar
> Task :app:distZip
> Task :app:assemble
> Task :app:test
> Task :app:check
> Task :app:build

---------------------

now , we just run gradle build without the clean

Calculating task graph as no cached configuration is available for tasks: :app:build
thsi is init
> Task :app:processTestResources NO-SOURCE

> Task :app:helloNish
custom task on the way kailash!

> Task :app:processResources NO-SOURCE
> Task :app:compileJava UP-TO-DATE
> Task :app:classes UP-TO-DATE
> Task :app:compileTestJava UP-TO-DATE
> Task :app:testClasses UP-TO-DATE
> Task :app:jar UP-TO-DATE
> Task :app:startScripts UP-TO-DATE
> Task :app:distZip UP-TO-DATE
> Task :app:distTar UP-TO-DATE
> Task :app:test UP-TO-DATE
> Task :app:assemble UP-TO-DATE
> Task :app:check UP-TO-DATE
> Task :app:build

the UP-TO-DATE indicates that some tasks did not need
to re-run
---------------------------

now we run the clean build again

Calculating task graph as configuration cache cannot be reused because file 'app\build.gradle' has changed.
thsi is init

> Task :app:helloNish
custom task on the way kailash!

> Task :app:clean
> Task :app:processResources NO-SOURCE
> Task :app:processTestResources NO-SOURCE
> Task :app:compileJava
> Task :app:classes
> Task :app:jar
> Task :app:startScripts
> Task :app:compileTestJava
> Task :app:testClasses
> Task :app:distTar
> Task :app:distZip
> Task :app:assemble
> Task :app:test
> Task :app:check
> Task :app:build

now, we enable the build cache

we need to add org.gradle.caching=true

To summarize:

First, we used the build task to populate our local cache with task inputs and outputs — we can imagine this was done a week ago.

Then, we used the clean task to mimic switching branches — overriding previous outputs.

Finally, we used the build task — unlike incremental builds, the previous outputs were stored in the local cache and could be reused.

local gradle build cache is at
\UserProfile\.gradle\caches

the 2 main directories used by gradle are
Project root directory - this is where the settings.gradle file is
Gradle user home - this is at C:\Users\nischal\.gradle

gradle supports multi-project builds
gradle refers to modules as subprojects
a multi-project build consists of one root project and one or more
subprojects

multi project standards
1. buildSrc is a kind of subproject at the gradle project root level containing
all the build logic!
lets say the project has the following subprojects - a and b
then on the same level as settings.gradle there will be 3 subprojects
a , b and buildSrc - buildSrc will have its own build.gradle

but buildSrc does not need to be included in the settings.gradle
as an "include"

buildSrc directory is auto recognized by gradle.

------------------there is another way to achieve multi project standard

at the same level with the subprojects,
we have a directory called build-logic
however, this time, this directory does not function like a subproject
it functions as a build directory.



 */